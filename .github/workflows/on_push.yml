name: Build V8 Static Library
on: push
jobs:
  build:
    name: ${{ matrix.config.name }}_${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    if: ${{!startsWith(github.event.head_commit.message, '[Skip]')}}
    permissions:
      # Needed in order to create new releases
      contents: write
    strategy:
      # Don't cancel other builds if one fails
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: windows
            arch: x64
            ar: llvm-ar
            lib_prefix: ""
            lib_suffix: .lib
            obj_suffix: .obj
          - os: ubuntu-latest
            name: linux
            arch: x64
            ar: ar
            lib_prefix: lib
            lib_suffix: .a
            obj_suffix: .o
    #          - os: macos-latest
    #            name: macos
    #            arch: x64
    #            ...
    #          - os: macos-latest
    #            name: macos
    #            arch: arm64
    #            ...
    #          - os: macos-latest
    #            name: ios
    #            arch: arm64
    #            ...
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0
      NINJA_SUMMARIZE_BUILD: 1
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Get target V8 version
        id: version
        shell: pwsh
        run: |
          $version = Get-Content -Path V8_VERSION
          If ('${{ github.event.inputs.version }}' -ne '') { $version = "${{ github.event.inputs.version }}" }
          echo "V8_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install depot tools
        shell: pwsh
        run: |
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          git config --global depot-tools.allowGlobalGitConfig true
          echo "$pwd/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Checkout V8 source
        shell: pwsh
        run: |
          git clone --depth 1 --branch ${{ env.V8_VERSION }} https://github.com/v8/v8.git
          Set-Location -Path v8
          gclient sync --upstream --no-history

      - name: Configure V8
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path ./lib/
          Set-Location -Path v8
          python tools/dev/v8gen.py ${{ matrix.config.arch }}.release
          Get-Content "../targets/shared.args.gn","../targets/${{ matrix.config.name }}_${{ matrix.config.arch }}/args.gn" | Set-Content "./out.gn/${{ matrix.config.arch }}.release/args.gn" -Force
          Get-Content "./out.gn/${{ matrix.config.arch }}.release/args.gn" | Write-Output
          gn gen out.gn/${{ matrix.config.arch }}.release

      - name: Build hermetic libc++
        shell: pwsh
        run: |
          Set-Location -Path v8
          ninja -j 8 -C ./out.gn/${{ matrix.config.arch }}.release libc++
          ${{ matrix.config.ar }} rcs ../lib/${{ matrix.config.lib_prefix }}c++_chrome${{ matrix.config.lib_suffix }} ./out.gn/${{ matrix.config.arch }}.release/obj/buildtools/third_party/libc++/libc++/*${{ matrix.config.obj_suffix }}

      # V8 does not produce build targets for libc++abi on Windows because something something COM compatibility
      - name: Build hermetic libc++abi
        if: runner.os != 'Windows'
        shell: pwsh
        run: |
          Set-Location -Path v8
          ninja -j 8 -C ./out.gn/${{ matrix.config.arch }}.release libc++abi
          ${{ matrix.config.ar }} rcs ../lib/${{ matrix.config.lib_prefix }}c++abi_chrome${{ matrix.config.lib_suffix }} ./out.gn/${{ matrix.config.arch }}.release/obj/buildtools/third_party/libc++abi/libc++abi/*${{ matrix.config.obj_suffix }}

      - name: Build V8 monolith
        shell: pwsh
        run: |
          Set-Location -Path v8
          ninja -j 8 -C ./out.gn/${{ matrix.config.arch }}.release v8_monolith
          Copy-Item -Path ./out.gn/${{ matrix.config.arch }}.release/obj/${{ matrix.config.lib_prefix }}v8_monolith${{ matrix.config.lib_suffix }} -Destination ../lib/ -Container

      - name: Compress libraries
        shell: pwsh
        run: |
          Compress-Archive -Path ./lib -Destination ./v8_libs_${{ env.V8_VERSION }}_${{ matrix.config.name }}_${{ matrix.config.arch }}.zip

      - name: Release V8 libraries
        uses: softprops/action-gh-release@v2
        with:
          files: ./v8_libs_${{ env.V8_VERSION }}_${{ matrix.config.name }}_${{ matrix.config.arch }}.zip
          name: V8 Release ${{ env.V8_VERSION }}
          tag_name: v${{ env.V8_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Since at least the Windows target will always be enabled, package the includes from its build
      - name: Prepare and compress include directory
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path ./include/
          Copy-Item -Path ./v8/include -Recurse -Filter *.h -Destination ./include/v8 -Container
          Copy-Item -Path ./v8/third_party/libc++/src/include/ -Recurse -Destination ./include/libc++ -Container
          Copy-Item -Path ./v8/third_party/libc++abi/src/include/ -Recurse -Destination ./include/libc++abi -Container
          Compress-Archive -Path ./include -DestinationPath ./v8_includes_${{ env.V8_VERSION }}.zip

      - name: Release V8 header files
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: ./v8_includes_${{ env.V8_VERSION }}.zip
          name: V8 Release ${{ env.V8_VERSION }}
          tag_name: v${{ env.V8_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
